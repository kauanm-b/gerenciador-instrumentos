#!/usr/bin/env python
"""
Script para gerenciar a base de dados de instrumentos.
"""
import logging
import json
import os
import time
from datetime import datetime
from typing import List, Dict, Any
from src.database.repository import InstrumentoRepository
from src.database.models import Instrumento
from src.database.database import SessionLocal
from src.database.init_db import init_db

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

def limpar_arquivo_log(caminho_arquivo):
    """Limpa o conte√∫do do arquivo de log."""
    try:
        # Verifica se o arquivo existe
        if os.path.exists(caminho_arquivo):
            # Abre o arquivo em modo de escrita, o que apaga seu conte√∫do
            with open(caminho_arquivo, 'w', encoding='utf-8') as f:
                f.write("")
            print(f"üßπ Arquivo de log limpo: {caminho_arquivo}")
        else:
            print(f"üìù Arquivo de log n√£o encontrado: {caminho_arquivo}")
    except Exception as e:
        print(f"‚ùå Erro ao limpar arquivo de log: {e}")

def configurar_logging():
    """Configura o sistema de logging para salvar em arquivo e console."""
    # Caminho do arquivo de log
    caminho_log = "logs/instrumentos.log"
    
    # Criar diret√≥rio de logs se n√£o existir
    os.makedirs("logs", exist_ok=True)
    
    # Limpar o arquivo de log antes de come√ßar
    limpar_arquivo_log(caminho_log)
    
    # Configurar o logger
    logger = logging.getLogger("instrumentos")
    logger.setLevel(logging.INFO)
    
    # Limpar handlers existentes para evitar duplica√ß√£o
    if logger.handlers:
        logger.handlers.clear()
    
    # Formato do log
    formato = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    
    # Handler para arquivo
    arquivo_handler = logging.FileHandler(caminho_log, encoding="utf-8")
    arquivo_handler.setFormatter(formato)
    logger.addHandler(arquivo_handler)
    
    # Handler para console
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formato)
    logger.addHandler(console_handler)
    
    return logger

def main():
    """Fun√ß√£o principal."""
    # Registrar in√≠cio da execu√ß√£o
    tempo_inicio = time.time()
    
    try:
        # Configurar logging
        logger = configurar_logging()
        
        logger.info("=" * 50)
        logger.info("INICIANDO PROCESSO DE GERENCIAMENTO DE INSTRUMENTOS")
        logger.info("=" * 50)
        
        # Inicializa o banco de dados se necess√°rio
        logger.info("üîç Verificando banco de dados...")
        init_db()
        logger.info("‚úÖ Banco de dados verificado com sucesso!")
        
        # Criar sess√£o do banco de dados
        db = SessionLocal()
        try:
            # Criar reposit√≥rio com a sess√£o
            repo = InstrumentoRepository(db)
            
            # Carregar dados do JSON mais recente
            logger.info("üìÇ Carregando dados do arquivo JSON...")
            with open("data/json/instrumentos.json", "r", encoding="utf-8") as f:
                instrumentos = json.load(f)
            
            logger.info(f"üìä Carregados {len(instrumentos)} instrumentos do JSON")
            
            # Sincronizar os dados do JSON com o banco de dados
            logger.info("üîÑ Iniciando sincroniza√ß√£o de dados...")
            estatisticas = repo.sincronizar_dados(instrumentos)
            
            # Calcular tempo de execu√ß√£o
            tempo_execucao = time.time() - tempo_inicio
            
            # Resumo da opera√ß√£o
            logger.info("=" * 50)
            logger.info("RESUMO DA OPERA√á√ÉO")
            logger.info("=" * 50)
            logger.info(f"üìù Instrumentos processados: {len(instrumentos)}")
            logger.info(f"‚ûï Novos instrumentos adicionados: {estatisticas['adicionados']}")
            logger.info(f"üîÑ Instrumentos atualizados: {estatisticas['atualizados']}")
            logger.info(f"‚ûñ Instrumentos removidos: {estatisticas['removidos']}")
            logger.info(f"‚ö†Ô∏è Avisos gerados: {estatisticas['avisos']}")
            logger.info(f"‚è±Ô∏è Tempo de execu√ß√£o: {tempo_execucao:.2f} segundos")
            logger.info("=" * 50)
            logger.info("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!")
            logger.info("=" * 50)
            
        finally:
            # Sempre fecha a sess√£o
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerenciar base: {str(e)}")
        raise

if __name__ == "__main__":
    # Executar fun√ß√£o principal
    main() 